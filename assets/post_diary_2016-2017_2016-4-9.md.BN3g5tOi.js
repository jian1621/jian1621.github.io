import{_ as e,c as a,o as t,ag as r}from "./chunks/framework.BVgKs9HZ.js";const p=JSON.parse('{"title":"Android开发的基础知识总结1","description":"android系统的基本结构，开发环境的介绍，以及四大组件的基本知识。","frontmatter":{"title":"Android开发的基础知识总结1","date":"2016-04-09T21:46:50.000Z","tags":["学习"],"description":"android系统的基本结构，开发环境的介绍，以及四大组件的基本知识。"},"headers":[],"relativePath":"post/diary/2016-2017/2016-4-9.md","filePath":"post/diary/2016-2017/2016-4-9.md"}'),l={name:"post/diary/2016-2017/2016-4-9.md"};function n(o, i, d, c, s, h){return t(),a("div",null,i[0]||(i[0]=[r('<h2 id="android系统由下而上的结构" tabindex="-1">android系统由下而上的结构 <a class="header-anchor" href="#android系统由下而上的结构" aria-label="Permalink to &quot;android系统由下而上的结构&quot;">​</a></h2><blockquote><p>主要是介绍android系统的大轮廓，对于开发本身，并没有直接的作用，但了解android系统的内部架构，有利于开发的条理性，对于以后开发的app在整个系统中的兼容性，具有很好的前瞻性。而且，通过了解android内部所涉及到的知识点，我们可以更快捷的查找我们开发某一项功能所需要用到的技术。<a href="http://www.cnblogs.com/iceknp/archive/2011/03/29/1998590.html" target="_blank" rel="noreferrer">引用文档</a></p></blockquote><h4 id="内核层" tabindex="-1">内核层： <a class="header-anchor" href="#内核层" aria-label="Permalink to &quot;内核层：&quot;">​</a></h4><p>基于<strong>Linux2.6</strong>内核，涵盖与硬件打交道的驱动.</p><ul><li>显示驱动:基于linux的帧缓冲驱动</li><li>音/视频驱动：基于ALSA</li><li>相机驱动：V412驱动</li><li>蓝牙驱动：IEEE802.15.1</li><li>wifi驱动: IEEE802.11</li><li>电源管理</li><li>GSM模块</li><li>存储驱动: 基于MTD的FLASH驱动</li><li>usb驱动</li><li>触摸屏驱动</li><li>各类传感器</li></ul><h4 id="库支持层" tabindex="-1">库支持层 <a class="header-anchor" href="#库支持层" aria-label="Permalink to &quot;库支持层&quot;">​</a></h4><p>在内核基础上，android本身所能与内核打交道系列基础库</p><ul><li>surface manager，负责显示与存取操作之间的交互;</li><li>media Framework:负责多媒体模块的库，支持mp3,mp4等;</li><li>Sqlite:数据库;</li><li>OPenGL:3D图形库;</li><li>FreeType:字体库,位图及矢量;</li><li>WebKit：浏览器内核库;</li><li>SGL:2D图形引擎库;</li><li>SSL：基于TCP/IP协议与各种应用层之间的协议;</li><li>Dalvik虚拟机：运行开发的java程序;</li></ul><h4 id="应用框架层" tabindex="-1">应用框架层 <a class="header-anchor" href="#应用框架层" aria-label="Permalink to &quot;应用框架层&quot;">​</a></h4><p>系统开发核心应用所使用的api框架，我们所开发到的应用程序均是基于这些框架，并且在其基础上使用部分功能来实现，这是我们app开发的<strong>基础</strong>.</p><ul><li>Activity Manager: 用来管理程序生命周期并提供常用的导航退回功能。</li><li>Windows Manager: 管理所有的差un港口程序</li><li>Content Providers: 不同应用之间共享数据</li><li>View System: 视图布局类。</li><li>Notification Manager: 应用可以在状态栏中显示自定义的提示消息。</li><li>Package Manager: android系统内的程序管理</li><li>Telephony Manager: 通信模块管理</li><li>Resource Manager: 资源管理</li><li>Location Manager: 位置类</li></ul><h4 id="应用程序层" tabindex="-1">应用程序层 <a class="header-anchor" href="#应用程序层" aria-label="Permalink to &quot;应用程序层&quot;">​</a></h4><p>我们所基于内核--&gt;库--&gt;框架开发出来的android应用程序。能够完成视觉/功能/数据等交互。</p><h2 id="开发环境介绍" tabindex="-1">开发环境介绍 <a class="header-anchor" href="#开发环境介绍" aria-label="Permalink to &quot;开发环境介绍&quot;">​</a></h2><blockquote><p>主要是介绍android开发时，各类资源所存放的位置，以及一些技巧。</p></blockquote><h4 id="开发环境中的文件夹" tabindex="-1">开发环境中的文件夹 <a class="header-anchor" href="#开发环境中的文件夹" aria-label="Permalink to &quot;开发环境中的文件夹&quot;">​</a></h4><ul><li>src:存放java代码的地方。</li><li>gen:内容是自动生成的，开发者不要修改，主要包含R.java，即Id生成处。每个具体的资源(图片/布局文件/字符串等)均对应于R内定义的一个id.</li><li>assests: 存放一些随程序打包的文件。程序可以动态读取这些内容。使用WebView加载的网页相关文件也在此文件夹。</li><li>bin:编译时产生的文件，内包含生成的apk，可以安装到手机上使用。</li><li>libs:存放第三方的jar包</li><li>res:资源文件夹，项目中使用的图片、布局、字符串文件夹等。布局文件放在layout中，菜单布局存放在menu中。图片存放在drawable中，声音存放在raw中，字符串存放在values文件夹中。gen/R.java也是根据其生成，如果开发中出现R类找不到的错误，基本就是res中的问题。</li><li>AndroidManifest.xml:整个android文件的配置文件，activity/service/brocastReceiver/ContentProvider均需要在这里面注册后才能使用，一些权限声明(访问网络/相机/SDcard读写等权限)也需要写在这里。在这里还可以指定程序最低兼容版本和目标版本</li><li>project.properties. 指定编译程序所使用的SDK版本。</li></ul><h4 id="开发环境常用的命令" tabindex="-1">开发环境常用的命令 <a class="header-anchor" href="#开发环境常用的命令" aria-label="Permalink to &quot;开发环境常用的命令&quot;">​</a></h4><ul><li>clean:清除项目生成的内容，这个常用，有时候一些xml错误在clean后就能清除。</li><li>debug:打包一个调试用的android程序的apk包。</li><li>release:打包一个发布用的android程序的apk包。</li></ul><h4 id="调试工具" tabindex="-1">调试工具 <a class="header-anchor" href="#调试工具" aria-label="Permalink to &quot;调试工具&quot;">​</a></h4><ul><li>可以在在debug as模式下进行调试，并设置端点，观察各种数据的实时状态。</li><li>LogCat工具，能够显示android运行中预添加的log类信息。 添加方法：Window--Show View--- Other--logCat.</li></ul><h2 id="四大组件介绍" tabindex="-1">四大组件介绍 <a class="header-anchor" href="#四大组件介绍" aria-label="Permalink to &quot;四大组件介绍&quot;">​</a></h2><blockquote><p>主要是介绍android系统中，我们常用到的组件，并简略涉及其功能使用技巧。</p></blockquote><h4 id="activity和view" tabindex="-1">Activity和View <a class="header-anchor" href="#activity和view" aria-label="Permalink to &quot;Activity和View&quot;">​</a></h4><p>负责与用户交互，Activity是功能上的交互，像一个功能容器，继承于Activity基类。View则用来进行布局，是Ui控件的基类。Activity+View有点像C#中的对话框，但对话框的功能和布局是集中到一起的。setContentView()可以将activity和view绑定。</p><h4 id="service" tabindex="-1">Service <a class="header-anchor" href="#service" aria-label="Permalink to &quot;Service&quot;">​</a></h4><p>也是功能容器，但运行在后台，继承于Service类，其多用来为其他组件提供后台服务或监控其他组件的运行状态。</p><h4 id="broadcast-receiver" tabindex="-1">Broadcast Receiver <a class="header-anchor" href="#broadcast-receiver" aria-label="Permalink to &quot;Broadcast Receiver&quot;">​</a></h4><p>监听android应用中其他组件的消息。开发者通过继承BroadcastReceiver类，重写OnReceive方法即可。其他组件通过SendBroadCast()、SendStickybroadcast()或sendOrderedBroadcast()来发送消息时，可以通过BroadcastReceiver来接收，OnReceiver()会被触发，完成消息传递。 使用时需要对receiver进行注册，可通过代码，也可以通过在AndroidManifest.xml配置。</p><h4 id="content-provider" tabindex="-1">Content Provider <a class="header-anchor" href="#content-provider" aria-label="Permalink to &quot;Content Provider&quot;">​</a></h4><p>应用之间的消息传递，比如两个app之间需要交换数据，就可以通过ContentProvider进行交换。有以下交换方法：</p><ul><li>insert():插入数据</li><li>deleted() 删除数据</li><li>update() 更新数据</li><li>query() 查询数据 和contentProvider组合使用的是ContentResolver,即通过后者来访问前者提供的数据。 ####Intent 可以当作不同组件之间通信的载体。如从一个组件到另外一个activity/Service/BroadcastReceiver.</li><li>Activity: startActivity(Intent intent,int requestCode)</li><li>Service: startService(Intent intent);</li><li>BroadcastProvider: sendBroadcast(Intent intent); 均可以将数据存放到intent中，然后传输到不同的组件内。Intent分为显式和隐式两种。隐式intent通过IntentFilter来实现。显示intent在使用时，需要定义好Intent的跳转源activity和目标activity.隐式intent则可以自己预先xml中定义好intent过滤器intentfilter.然后在调用的时候就不用在代码中写显示intent所需求的内容。</li></ul>',32)]))}const v=e(l,[["render",n]]);export{p as __pageData,v as default};
